{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Exerc\u00edcios de Microservi\u00e7os - 2025.1","text":""},{"location":"#individual","title":"Individual","text":"<ul> <li>Esther Caroline</li> </ul>"},{"location":"#grupo","title":"Grupo","text":"<ul> <li>Esther Caroline  </li> <li>Ana Helena Caiafa</li> </ul>"},{"location":"#instrucoes","title":"Instru\u00e7\u00f5es","text":"<p>Este site documenta as entregas feitas ao longo do semestre na disciplina de Plataformas de Microservi\u00e7os. Cada entrega possui sua pr\u00f3pria se\u00e7\u00e3o com explica\u00e7\u00f5es, evid\u00eancias (c\u00f3digos, imagens e prints de execu\u00e7\u00e3o), e os conceitos aplicados.</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li>Roteiro 1: Exchange de moedas via FastAPI (individual).</li> <li>Roteiro 2: Microservi\u00e7o de produtos</li> <li>Roteiro 3: Microservi\u00e7o de pedidos </li> <li>Roteiro 4: Pipeline CI/CD com Jenkins, DockerHub e Deploy automatizado.</li> <li>Roteiro 5: Deploy em Kubernetes com configura\u00e7\u00e3o de servi\u00e7os, deployments, secrets e configmaps.</li> <li>Roteiro 6: Implementa\u00e7\u00e3o de Bottlenecks \u2014 Caching com Redis e Observabilidade com Prometheus + Grafana.</li> </ul>"},{"location":"#ver-video-de-apresentacao-individual","title":"Ver v\u00eddeo de apresenta\u00e7\u00e3o individual","text":""},{"location":"#projeto-final","title":"Projeto Final","text":"<p>Plataforma de Pedidos \u2014 Conjunto de microservi\u00e7os (Account, Auth, Product, Order e Gateway), com deploy em cluster Kubernetes, monitoramento com Prometheus/Grafana e CI/CD via Jenkins.</p> <p>Ver v\u00eddeo de apresenta\u00e7\u00e3o do projeto</p>"},{"location":"bottlenecks/","title":"Roteiro 6 \u2014 Bottlenecks: Caching e Observabilidade","text":""},{"location":"bottlenecks/#desenvolvedora","title":"Desenvolvedora","text":"<ul> <li>Esther Cunha</li> </ul>"},{"location":"bottlenecks/#o-que-sao-bottlenecks","title":"\u2705 O que s\u00e3o Bottlenecks?","text":"<p>Bottlenecks (gargalos) s\u00e3o pontos do sistema que causam lentid\u00e3o, consumo excessivo de recursos ou atrasos na resposta. Para mitigar esses problemas, \u00e9 fundamental adotar t\u00e9cnicas que aumentem a performance e melhorem a visibilidade da aplica\u00e7\u00e3o.</p> <p>Neste projeto, foram implementadas duas solu\u00e7\u00f5es:</p> <ul> <li>Caching com Redis: para reduzir o n\u00famero de chamadas ao banco de dados e melhorar o tempo de resposta.</li> <li>Observabilidade com Prometheus e Grafana: para monitorar m\u00e9tricas em tempo real da aplica\u00e7\u00e3o.</li> </ul>"},{"location":"bottlenecks/#1-caching-com-redis","title":"1. Caching com Redis","text":""},{"location":"bottlenecks/#o-que-e-caching","title":"O que \u00e9 Caching?","text":"<p>Caching \u00e9 o processo de armazenar dados temporariamente para que futuras requisi\u00e7\u00f5es sejam atendidas mais rapidamente. Ao inv\u00e9s de buscar dados no banco todas as vezes, o sistema recupera diretamente do cache.</p>"},{"location":"bottlenecks/#como-foi-implementado","title":"Como foi implementado?","text":"<ul> <li>Utilizado o Spring Cache com Redis como provedor.</li> <li>Redis foi configurado como um container no cluster Kubernetes.</li> <li>Anota\u00e7\u00f5es <code>@Cacheable</code> foram utilizadas em m\u00e9todos de consulta, como por exemplo <code>getById</code>.</li> </ul>"},{"location":"bottlenecks/#dependencias-no-pomxml","title":"Depend\u00eancias no <code>pom.xml</code>","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"bottlenecks/#configuracao-no-applicationyml","title":"Configura\u00e7\u00e3o no <code>application.yml</code>","text":"<pre><code>spring:\n  cache:\n    type: redis\n  data:\n    redis:\n      host: ${REDIS_HOST:redis}\n      port: ${REDIS_PORT:6379}\n</code></pre>"},{"location":"bottlenecks/#2-observabilidade-com-prometheus-e-grafana","title":"2. Observabilidade com Prometheus e Grafana","text":""},{"location":"bottlenecks/#o-que-e-observabilidade","title":"O que \u00e9 Observabilidade?","text":"<p>Observabilidade \u00e9 a capacidade de entender o que est\u00e1 acontecendo no sistema atrav\u00e9s da coleta, visualiza\u00e7\u00e3o e an\u00e1lise de m\u00e9tricas e logs. Ela \u00e9 essencial para diagnosticar falhas, analisar performance e acompanhar o uso da aplica\u00e7\u00e3o em tempo real.</p>"},{"location":"bottlenecks/#como-foi-implementado_1","title":"Como foi implementado?","text":"<ul> <li>O endpoint <code>/actuator/prometheus</code> foi exposto com Spring Boot Actuator.</li> <li>As m\u00e9tricas s\u00e3o capturadas com Micrometer + Prometheus.</li> <li>Os dados s\u00e3o visualizados em tempo real no Grafana.</li> </ul>"},{"location":"bottlenecks/#dependencias-no-pomxml_1","title":"Depend\u00eancias no <code>pom.xml</code>","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"bottlenecks/#configuracao-no-applicationyml_1","title":"Configura\u00e7\u00e3o no <code>application.yml</code>","text":"<pre><code>management:\n  endpoint:\n    gateway:\n      enabled: true\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus', 'gateway' ]\n</code></pre>"},{"location":"bottlenecks/#exemplo-de-dashboard-no-grafana","title":"Exemplo de Dashboard no Grafana","text":""},{"location":"bottlenecks/#conclusao","title":"Conclus\u00e3o","text":"<p>As otimiza\u00e7\u00f5es implementadas com Redis e Prometheus/Grafana proporcionam:</p> <ul> <li>Maior performance e escalabilidade com o uso de cache.</li> <li>Maior controle e monitoramento com a exposi\u00e7\u00e3o de m\u00e9tricas e dashboards visuais.</li> <li>Suporte a pr\u00e1ticas modernas de engenharia de software em ambientes distribu\u00eddos.</li> </ul> <p>Essas solu\u00e7\u00f5es s\u00e3o fundamentais para garantir uma aplica\u00e7\u00e3o resiliente, perform\u00e1tica e observ\u00e1vel.</p>"},{"location":"custos/","title":"\ud83d\udcb8 An\u00e1lise de Custos da Aplica\u00e7\u00e3o na AWS","text":""},{"location":"custos/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A aplica\u00e7\u00e3o foi implantada em um ambiente de nuvem gerenciado pela AWS, utilizando o servi\u00e7o Amazon EKS (Elastic Kubernetes Service) para orquestra\u00e7\u00e3o dos microsservi\u00e7os. A seguir, detalha-se uma an\u00e1lise robusta de custos baseada em:</p> <ul> <li>Dados reais da aba de faturamento da AWS</li> <li>Uso atual do cluster EKS e servi\u00e7os relacionados</li> <li>Proje\u00e7\u00f5es de servi\u00e7os futuros (Redis, Jenkins, Prometheus e Grafana)</li> </ul>"},{"location":"custos/#estimativa-de-custos-mensais-por-servico","title":"Estimativa de Custos Mensais por Servi\u00e7o","text":"Servi\u00e7o Estimativa Mensal (USD) Observa\u00e7\u00f5es EKS (Elastic Kubernetes Service) $8.00 Custo base pelo uso do plano de controle gerenciado. EC2 - Compute (Inst\u00e2ncias) $6.45 Refere-se ao uso de 2 n\u00f3s <code>t3.medium</code>, respons\u00e1veis pela execu\u00e7\u00e3o dos pods Kubernetes. EC2 - Other (Outros custos) $7.45 Inclui EBS (discos), transfer\u00eancia de dados e outros componentes de infraestrutura. VPC (Virtual Private Cloud) $0.78 Custo de roteamento, sub-redes e infraestrutura de rede. S3 (Simple Storage Service) $0.00 Ainda n\u00e3o utilizado no projeto. Taxas (Tax) $3.11 Impostos e encargos aplic\u00e1veis pela AWS. Redis (ElastiCache - previsto) $15.00 Simula\u00e7\u00e3o para uma inst\u00e2ncia <code>cache.t3.micro</code>, considerando uso em produ\u00e7\u00e3o leve. Jenkins (container no EKS) $0.00 Reaproveita o cluster EKS, sem custo adicional relevante. Prometheus + Grafana (previstos) $0.00 Devem rodar no mesmo cluster com volume ef\u00eamero; custo incluso nos n\u00f3s EC2. Total Estimado (com Redis) \u2248 $40.79 Valor mensal projetado com base no uso atual e nos servi\u00e7os adicionais planejados."},{"location":"custos/#grafico-de-distribuicao-de-custos","title":"Gr\u00e1fico de Distribui\u00e7\u00e3o de Custos","text":"<p>Este gr\u00e1fico mostra visualmente que os maiores custos est\u00e3o concentrados em EC2 e EKS, respons\u00e1veis pela infraestrutura base dos microsservi\u00e7os.</p>"},{"location":"custos/#analise-critica","title":"An\u00e1lise Cr\u00edtica","text":"<ul> <li>EKS e EC2 somam mais de 60% do custo total, sendo os principais alvos de otimiza\u00e7\u00e3o.</li> <li>Redis deve ser o \u00fanico servi\u00e7o externo a ser adicionado com custo significativo.</li> <li>Servi\u00e7os como Jenkins, Prometheus e Grafana foram planejados para rodar no mesmo cluster, evitando gastos extras.</li> <li>VPC tem custo marginal, mas constante.</li> <li>RDS foi descartado: o banco de dados PostgreSQL est\u00e1 rodando localmente, o que reduz significativamente o custo da arquitetura.</li> </ul>"},{"location":"custos/#recomendacoes-de-otimizacao","title":"Recomenda\u00e7\u00f5es de Otimiza\u00e7\u00e3o","text":"Estrat\u00e9gia Benef\u00edcio Esperado Reduzir inst\u00e2ncias para <code>t3.small</code> Economia de at\u00e9 30% no EC2 Compute Ativar o HPA corretamente Balanceamento autom\u00e1tico de carga reduz picos desnecess\u00e1rios Monitorar custos com AWS Budgets Alertas autom\u00e1ticos ao ultrapassar limite definido Consolidar servi\u00e7os no mesmo cluster Redu\u00e7\u00e3o do overhead por multi-cluster"},{"location":"custos/#projecoes-futuras","title":"Proje\u00e7\u00f5es Futuras","text":"<p>Com a aplica\u00e7\u00e3o amadurecendo, a proje\u00e7\u00e3o de custo total com Redis, Jenkins e observabilidade adicionados gira em torno de USD $40 a $45 por m\u00eas, mantendo uma estrutura robusta e escal\u00e1vel.</p> <p>Se o projeto for movido para produ\u00e7\u00e3o real com mais tr\u00e1fego e dados, recomenda-se:</p> <ul> <li>Migrar Redis para um plano com r\u00e9plica (<code>cache.t3.small</code> ou maior)</li> <li>Persistir m\u00e9tricas do Prometheus em EBS</li> <li>Monitorar tr\u00e1fego com AWS CloudWatch para otimizar balanceadores e transfer\u00eancias</li> </ul>"},{"location":"custos/#referencias","title":"Refer\u00eancias","text":"<ul> <li>AWS Pricing Calculator</li> <li>AWS Cost Explorer</li> <li>Documenta\u00e7\u00e3o do EKS</li> <li>Guia de pre\u00e7os do ElastiCache</li> <li>Comparativo de inst\u00e2ncias EC2</li> </ul>"},{"location":"paas/","title":"\u2601\ufe0f Plataforma como Servi\u00e7o (PaaS)","text":""},{"location":"paas/#onde-utilizamos-paas","title":"Onde utilizamos PaaS","text":"<p>No nosso projeto, utilizamos servi\u00e7os em modelo PaaS principalmente em duas frentes: orquestra\u00e7\u00e3o de microsservi\u00e7os com o Amazon EKS e execu\u00e7\u00e3o da pipeline CI/CD com o Jenkins no cluster Kubernetes.</p>"},{"location":"paas/#1-amazon-eks-elastic-kubernetes-service","title":"1. Amazon EKS (Elastic Kubernetes Service)","text":"<p>O EKS \u00e9 um exemplo claro de Plataforma como Servi\u00e7o (PaaS). A AWS gerencia toda a camada de infraestrutura abaixo do Kubernetes \u2014 como servidores f\u00edsicos, virtualiza\u00e7\u00e3o, sistema operacional e orquestra\u00e7\u00e3o \u2014 permitindo que nossa equipe foque no desenvolvimento, deploy e escalabilidade dos microsservi\u00e7os.</p> <p>Como utilizamos o EKS: - Criamos um cluster gerenciado usando o AWS EKS. - Implantamos todos os nossos microsservi\u00e7os (gateway, account, auth, exchange, product, order) dentro do cluster. - Gerenciamos o deploy via arquivos <code>k8s.yaml</code> com as defini\u00e7\u00f5es de <code>Deployment</code>, <code>Service</code>, <code>Secrets</code> e <code>ConfigMap</code>. - Aplicamos o Horizontal Pod Autoscaler (HPA) para escalonamento autom\u00e1tico baseado em carga.</p> <p>Isso nos permitiu desenvolver e escalar a aplica\u00e7\u00e3o sem nos preocupar com a complexidade de provisionar e manter a infraestrutura subjacente.</p>"},{"location":"paas/#2-jenkins-no-kubernetes","title":"2. Jenkins no Kubernetes","text":"<p>Embora o Jenkins em si seja uma ferramenta de automa\u00e7\u00e3o (e normalmente rodaria como IaaS), ao rod\u00e1-lo dentro de um cluster Kubernetes gerenciado pelo EKS, ele tamb\u00e9m passa a se beneficiar do modelo PaaS \u2014 pois toda a orquestra\u00e7\u00e3o, disponibilidade e escalabilidade do Jenkins est\u00e1 sobre uma plataforma automatizada.</p> <p>Como utilizamos o Jenkins: - Jenkins foi configurado no cluster EKS via <code>Jenkinsfile</code> em cada microsservi\u00e7o. - Automatizamos etapas de build, push para DockerHub e deploy no pr\u00f3prio EKS. - A integra\u00e7\u00e3o CI/CD ficou desacoplada do hardware e servidores f\u00edsicos, permitindo flexibilidade e disponibilidade constantes.</p>"},{"location":"paas/#3-observabilidade-e-planejamento-futuro-paas-implicito","title":"3. Observabilidade e Planejamento futuro (PaaS impl\u00edcito)","text":"<p>Tamb\u00e9m planejamos utilizar Prometheus + Grafana e Redis em containers no EKS, o que herda as caracter\u00edsticas de PaaS:</p> <ul> <li>Redis (em container) para caching, com escalabilidade gerenciada automaticamente.</li> <li>Prometheus + Grafana, rodando em containers desacoplados da infraestrutura, usados para monitoramento e visualiza\u00e7\u00e3o de m\u00e9tricas.</li> </ul> <p>Mesmo sendo componentes tradicionalmente usados em modelos IaaS, o fato de estarem sendo executados no EKS faz com que se encaixem em uma estrutura de PaaS funcional, j\u00e1 que a AWS se responsabiliza pela infraestrutura necess\u00e1ria para execut\u00e1-los.</p>"},{"location":"paas/#conclusao","title":"Conclus\u00e3o","text":"<p>Ao optar por executar toda a aplica\u00e7\u00e3o em um cluster Kubernetes gerenciado (EKS), nosso grupo aderiu ao modelo PaaS na pr\u00e1tica. Isso trouxe agilidade no desenvolvimento, facilidade de manuten\u00e7\u00e3o e escalabilidade sem a complexidade de gerenciar infraestrutura f\u00edsica, o que \u00e9 a ess\u00eancia do modelo Platform as a Service.</p>"},{"location":"projetos/","title":"\ud83c\udf10 Projeto Final \u2014 Plataforma de Pedidos (Microservi\u00e7os)","text":""},{"location":"projetos/#desenvolvedoras","title":"Desenvolvedoras","text":"<ul> <li>Esther Caroline  </li> <li>Ana Helena Caiafa</li> </ul>"},{"location":"projetos/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este projeto consiste no desenvolvimento e implanta\u00e7\u00e3o de uma plataforma baseada em microsservi\u00e7os com observabilidade, escalabilidade e automa\u00e7\u00e3o de entrega cont\u00ednua, utilizando tecnologias como:</p> <ul> <li>Spring Boot (Java)</li> <li>Docker</li> <li>Jenkins</li> <li>Kubernetes (AWS EKS)</li> <li>Redis (caching)</li> <li>Prometheus + Grafana (observabilidade)</li> </ul>"},{"location":"projetos/#funcionalidades-da-aplicacao","title":"Funcionalidades da Aplica\u00e7\u00e3o","text":"<ul> <li>Cadastro e autentica\u00e7\u00e3o de usu\u00e1rios (Auth, Account)</li> <li>Consulta e gerenciamento de produtos (Product)</li> <li>Cria\u00e7\u00e3o e processamento de pedidos (Order)</li> <li>API Gateway com roteamento centralizado</li> <li>Monitoramento e escalabilidade horizontal (HPA)</li> </ul>"},{"location":"projetos/#arquitetura-da-solucao","title":"Arquitetura da Solu\u00e7\u00e3o","text":""},{"location":"projetos/#cicd-com-jenkins","title":"CI/CD com Jenkins","text":"<p>Integramos o Jenkins ao ciclo de desenvolvimento para garantir entrega cont\u00ednua:</p> <ul> <li>Build da aplica\u00e7\u00e3o com Maven</li> <li>Gera\u00e7\u00e3o de imagens Docker multiplataforma</li> <li>Push automatizado no DockerHub</li> <li>Deploy no cluster Kubernetes (EKS)</li> </ul>"},{"location":"projetos/#kubernetes-com-eks","title":"Kubernetes com EKS","text":"<p>A aplica\u00e7\u00e3o foi implantada em um cluster EKS (Elastic Kubernetes Service), com os seguintes recursos para cada microservi\u00e7o:</p> <ul> <li><code>Deployment</code></li> <li><code>Service</code></li> <li><code>Secrets</code></li> <li><code>ConfigMap</code></li> </ul>"},{"location":"projetos/#cluster-eks-ativo","title":"\ud83d\udcf8 Cluster EKS Ativo","text":""},{"location":"projetos/#plataforma-como-servico-paas","title":"\u2601\ufe0f Plataforma como Servi\u00e7o (PaaS)","text":"<p>Utilizamos PaaS em dois principais pontos:</p> <ul> <li>EKS: gerenciamento de orquestra\u00e7\u00e3o dos microsservi\u00e7os</li> <li>Jenkins em Kubernetes: automatiza\u00e7\u00e3o do deploy desacoplado de infraestrutura</li> </ul> <p>Veja o roteiro completo de PaaS</p>"},{"location":"projetos/#analise-de-custos","title":"\ud83d\udcb8 An\u00e1lise de Custos","text":"<p>Analisamos os custos estimados com base nos servi\u00e7os utilizados (EKS, EC2, Redis, etc.):</p> Servi\u00e7o Estimativa Mensal EKS + EC2 + VPC + Redis \u2248 $40,79"},{"location":"projetos/#grafico-de-custos","title":"\ud83d\udcf8 Gr\u00e1fico de Custos","text":"<p>Veja a an\u00e1lise de custos completa</p>"},{"location":"projetos/#bottlenecks-e-solucoes","title":"Bottlenecks e Solu\u00e7\u00f5es","text":""},{"location":"projetos/#1-caching-com-redis","title":"1. Caching com Redis","text":"<ul> <li>Redis foi integrado ao servi\u00e7o de pedidos para reduzir consultas repetidas ao banco</li> <li>Utilizamos <code>@Cacheable</code> e <code>@CacheEvict</code> com Spring Cache</li> <li>Configurado para rodar via container no EKS</li> </ul>"},{"location":"projetos/#2-observabilidade-com-prometheus-grafana","title":"2. Observabilidade com Prometheus + Grafana","text":"<ul> <li>M\u00e9tricas coletadas via Actuator (<code>/actuator/prometheus</code>)</li> <li>Prometheus configurado para scrape dos microservi\u00e7os</li> <li>Grafana configurado com painel para visualiza\u00e7\u00e3o de m\u00e9tricas de cada aplica\u00e7\u00e3o</li> </ul> <p>Explica\u00e7\u00e3o completa em Bottlenecks</p>"},{"location":"projetos/#apresentacao","title":"Apresenta\u00e7\u00e3o","text":""},{"location":"projetos/#storytelling","title":"Storytelling","text":"<p>Ver v\u00eddeo de apresenta\u00e7\u00e3o</p>"},{"location":"projetos/#conclusao","title":"Conclus\u00e3o","text":"<p>O projeto atingiu os principais objetivos:</p> <ul> <li>Aplica\u00e7\u00e3o distribu\u00edda, modular e escal\u00e1vel</li> <li>CI/CD com deploy autom\u00e1tico no Kubernetes</li> <li>Monitoramento e otimiza\u00e7\u00e3o de desempenho</li> <li>Custo controlado e arquitetura gerenci\u00e1vel</li> </ul>"},{"location":"roteiro1/","title":"Roteiro 1 - Exchange","text":""},{"location":"roteiro1/#desenvolvedor","title":"Desenvolvedor","text":"<ul> <li>Esther Cunha</li> </ul>"},{"location":"roteiro1/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>Implementamos um microservi\u00e7o <code>exchange-service</code> usando FastAPI que permite realizar convers\u00e3o de moedas via API p\u00fablica ExchangeRate-API.</p> <p>O servi\u00e7o responde ao endpoint:</p> <pre><code>GET /exchange-rate/{from_curr}/{to_curr}\n</code></pre> <p>Exemplo de uso:</p> <pre><code>GET /exchange-rate/USD/EUR\n</code></pre> <p>Resposta esperada:</p> <pre><code>{\n  \"result\": \"success\",\n  \"documentation\": \"https://www.exchangerate-api.com/docs\",\n  \"terms_of_use\": \"https://www.exchangerate-api.com/terms\",\n  \"time_last_update_unix\": 1619222402,\n  \"time_last_update_utc\": \"Sat, 24 Apr 2021 00:00:02 +0000\",\n  \"time_next_update_unix\": 1619308802,\n  \"time_next_update_utc\": \"Sun, 25 Apr 2021 00:00:02 +0000\",\n  \"base_code\": \"USD\",\n  \"target_code\": \"EUR\",\n  \"conversion_rate\": 0.82\n}\n</code></pre>"},{"location":"roteiro1/#tecnologias-usadas","title":"Tecnologias usadas","text":"<ul> <li>Python 3.12</li> <li>FastAPI</li> <li>Uvicorn</li> <li>httpx</li> <li>Docker</li> <li>ExchangeRate-API</li> </ul>"},{"location":"roteiro1/#o-que-foi-feito","title":"O que foi feito","text":"<ul> <li>[x] Implementa\u00e7\u00e3o do <code>exchange-service</code> com FastAPI.</li> <li>[x] Integra\u00e7\u00e3o com ExchangeRate-API utilizando a biblioteca <code>httpx</code> de forma ass\u00edncrona.</li> <li>[x] Resposta retornada diretamente da API de terceiros.</li> <li>[x] Configura\u00e7\u00e3o para rodar via Docker.</li> <li>[x] Testes manuais atrav\u00e9s do Swagger UI (<code>/docs</code>).</li> </ul>"},{"location":"roteiro1/#codigo-fonte","title":"C\u00f3digo Fonte","text":"<pre><code>from fastapi import FastAPI, HTTPException\nimport httpx\n\napp = FastAPI()\n\n@app.get(\"/exchange-rate/{from_curr}/{to_curr}\")\nasync def get_exchange_rate(from_curr: str, to_curr: str):\n    url = f\"https://v6.exchangerate-api.com/v6/76bbd4fd2f0355465749613c/pair/{from_curr}/{to_curr}\"\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n\n    if response.status_code != 200:\n        raise HTTPException(status_code=500, detail=\"Failed to fetch exchange rate\")\n\n    return response.json()\n</code></pre>"},{"location":"roteiro1/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Gateway\n    participant Exchange\n    participant 3rdPartyAPI\n\n    User-&gt;&gt;Gateway: GET /exchange-rate/USD/EUR\n    Gateway-&gt;&gt;Exchange: GET /exchange-rate/USD/EUR\n    Exchange-&gt;&gt;3rdPartyAPI: GET /pair/USD/EUR\n    3rdPartyAPI--&gt;&gt;Exchange: JSON response\n    Exchange--&gt;&gt;Gateway: JSON response\n    Gateway--&gt;&gt;User: JSON response\n</code></pre>"},{"location":"roteiro1/#como-rodar-o-servico-localmente","title":"Como rodar o servi\u00e7o localmente","text":"<ol> <li>Instalar as depend\u00eancias:</li> </ol> <pre><code>pip install fastapi uvicorn httpx\n</code></pre> <ol> <li>Rodar o servi\u00e7o:</li> </ol> <pre><code>uvicorn main:app --reload\n</code></pre> <ol> <li>Testar no navegador ou via <code>curl</code>:</li> </ol> <pre><code>curl http://127.0.0.1:8000/exchange-rate/USD/EUR\n</code></pre> <ol> <li>Acessar documenta\u00e7\u00e3o autom\u00e1tica do Swagger: http://127.0.0.1:8000/docs</li> </ol>"},{"location":"roteiro1/#como-rodar-com-docker","title":"Como rodar com Docker","text":"<ol> <li>Criar <code>Dockerfile</code> (se ainda n\u00e3o tiver):</li> </ol> <pre><code>FROM python:3.12-slim\n\nWORKDIR /app\n\nCOPY . .\n\nRUN pip install fastapi uvicorn httpx\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n</code></pre> <ol> <li>Build e run:</li> </ol> <pre><code>docker build -t exchange-service .\ndocker run -p 8000:80 exchange-service\n</code></pre> <p>Acesse: http://localhost:8000/exchange-rate/USD/EUR</p>"},{"location":"roteiro1/#repositorio","title":"\u2705 Reposit\u00f3rio","text":"<ul> <li>https://github.com/Platform-Microservices/exchange-service</li> </ul>"},{"location":"roteiro2/","title":"Roteiro 2 \u2014 Product API","text":""},{"location":"roteiro2/#desenvolvedor","title":"Desenvolvedor","text":"<ul> <li>Esther Cunha  </li> </ul>"},{"location":"roteiro2/#descricao-da-atividade","title":"Descri\u00e7\u00e3o da Atividade","text":"<p>Implementa\u00e7\u00e3o de um microservi\u00e7o Product com as seguintes opera\u00e7\u00f5es RESTful:</p> <ul> <li><code>POST /product</code>: Criar um novo produto.</li> <li><code>GET /product</code>: Listar todos os produtos.</li> <li><code>GET /product/{id}</code>: Buscar produto por ID.</li> <li><code>DELETE /product/{id}</code>: Remover produto por ID.</li> </ul> <p>O servi\u00e7o foi implementado em Java utilizando:</p> <ul> <li>Spring Boot </li> <li>Spring Data JPA </li> <li>Spring Cloud OpenFeign para comunica\u00e7\u00e3o.  </li> <li>Banco de dados: PostgreSQL.</li> </ul>"},{"location":"roteiro2/#endpoints-implementados","title":"Endpoints Implementados","text":""},{"location":"roteiro2/#post-product","title":"POST <code>/product</code>","text":"<p>Request body:</p> <pre><code>{\n  \"name\": \"Tomato\",\n  \"price\": 10.12,\n  \"unit\": \"kg\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"generated-uuid\",\n  \"name\": \"Tomato\",\n  \"price\": 10.12,\n  \"unit\": \"kg\"\n}\n</code></pre> <p>Retorna <code>201 Created</code> ou <code>200 OK</code>.</p>"},{"location":"roteiro2/#get-product","title":"GET <code>/product</code>","text":"<p>Response:</p> <pre><code>[\n  {\n    \"id\": \"uuid1\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n  },\n  {\n    \"id\": \"uuid2\",\n    \"name\": \"Cheese\",\n    \"price\": 0.62,\n    \"unit\": \"slice\"\n  }\n]\n</code></pre> <p>Retorna <code>200 OK</code>.</p>"},{"location":"roteiro2/#get-productid","title":"GET <code>/product/{id}</code>","text":"<p>Response:</p> <pre><code>{\n  \"id\": \"uuid1\",\n  \"name\": \"Tomato\",\n  \"price\": 10.12,\n  \"unit\": \"kg\"\n}\n</code></pre> <p>Retorna <code>200 OK</code>.</p>"},{"location":"roteiro2/#delete-productid","title":"DELETE <code>/product/{id}</code>","text":"<p>Retorna <code>204 No Content</code> ao remover com sucesso.</p>"},{"location":"roteiro2/#bottlenecks-implementados","title":"Bottlenecks Implementados","text":"<ul> <li>Implementa\u00e7\u00e3o de valida\u00e7\u00e3o para evitar <code>StaleObjectStateException</code> ao salvar ou deletar produtos.</li> <li>Uso de <code>@GeneratedValue</code> para gera\u00e7\u00e3o autom\u00e1tica de UUID.</li> <li>Configura\u00e7\u00e3o de Spring Data JPA para opera\u00e7\u00f5es <code>CRUD</code> simplificadas.</li> </ul>"},{"location":"roteiro2/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ul> <li><code>Product.java</code> \u2192 entidade de dom\u00ednio.</li> <li><code>ProductModel.java</code> \u2192 entidade de persist\u00eancia JPA.</li> <li><code>ProductRepository.java</code> \u2192 interface de reposit\u00f3rio.</li> <li><code>ProductService.java</code> \u2192 camada de servi\u00e7o.</li> <li><code>ProductResource.java</code> \u2192 camada de controller REST.</li> </ul>"},{"location":"roteiro2/#base-de-dados","title":"Base de Dados","text":"<p>Tabela criada no PostgreSQL com o seguinte script:</p> <pre><code>CREATE TABLE product (\n    id_product UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    tx_name VARCHAR(256) NOT NULL,\n    nu_price NUMERIC(10,2) NOT NULL,\n    tx_unit VARCHAR(50) NOT NULL\n);\n</code></pre>"},{"location":"roteiro2/#diagrama-arquitetura-da-solucao","title":"Diagrama \u2014 Arquitetura da Solu\u00e7\u00e3o","text":"<pre><code>graph TD\n    Internet --&gt; Gateway\n    Gateway --&gt; Auth\n    Gateway --&gt; Product\n    Product --&gt; Database\n</code></pre>"},{"location":"roteiro2/#testes-realizados","title":"Testes Realizados","text":"<ul> <li>\u2705 Testes via Postman de todos os endpoints.  </li> <li>\u2705 Teste de integra\u00e7\u00e3o com o Gateway e valida\u00e7\u00e3o JWT via Auth Service.  </li> </ul>"},{"location":"roteiro2/#repositorio","title":"Reposit\u00f3rio","text":"<ul> <li>https://github.com/Platform-Microservices/product</li> <li>https://github.com/Platform-Microservices/product-service</li> </ul>"},{"location":"roteiro3/","title":"Roteiro 3 \u2014 Order\u00a0API","text":""},{"location":"roteiro3/#desenvolvedor","title":"Desenvolvedor","text":"<ul> <li>Esther Cunha  </li> </ul>"},{"location":"roteiro3/#descricao-da-atividade","title":"Descri\u00e7\u00e3o da Atividade","text":"<p>Implementa\u00e7\u00e3o de um microservi\u00e7o Order respons\u00e1vel por cadastrar pedidos contendo N itens e expor opera\u00e7\u00f5es RESTful para consulta.</p> <p>Requisitos atendidos:</p> <ul> <li><code>POST /order</code>: criar um pedido completo (cabe\u00e7alho + itens).</li> <li><code>GET /order</code>: listar todos os pedidos.</li> <li><code>GET /order/{id}</code>: buscar um pedido por ID, validando se pertence \u00e0 conta informada.</li> <li>Persist\u00eancia em PostgreSQL com relacionamento 1\u00a0Order \u2194\u00a0N\u00a0OrderItem.</li> <li>Gera\u00e7\u00e3o de UUID autom\u00e1tica.</li> <li>Spring\u00a0Cloud OpenFeign para valida\u00e7\u00e3o de produtos no microservi\u00e7o Product.</li> </ul>"},{"location":"roteiro3/#endpoints-implementados","title":"Endpoints Implementados","text":""},{"location":"roteiro3/#post-order","title":"POST\u00a0<code>/order</code>","text":"<p>Cria um pedido com m\u00faltiplos itens. Se algum <code>idProduct</code> n\u00e3o existir no microservi\u00e7o Product, retorna <code>400 Bad\u00a0Request</code>.</p> <p>Request body:</p> <pre><code>{\n  \"idAccount\": \"uuid-account\",\n  \"items\": [\n    { \"idProduct\": \"uuid-tomato\", \"quantity\": 3 },\n    { \"idProduct\": \"uuid-cheese\", \"quantity\": 1 }\n  ]\n}\n</code></pre> <p>Response <code>201 Created</code>:</p> <pre><code>{\n  \"id\": \"generated-uuid\",\n  \"date\": \"2025-05-23\",\n  \"total\": 40.58,\n  \"account\": { \"id\": \"uuid-account\" },\n  \"items\": [\n    {\n      \"id\": \"generated-uuid-item1\",\n      \"product\": { \"id\": \"uuid-tomato\" },\n      \"quantity\": 3,\n      \"total\": 30.36\n    },\n    {\n      \"id\": \"generated-uuid-item2\",\n      \"product\": { \"id\": \"uuid-cheese\" },\n      \"quantity\": 1,\n      \"total\": 10.22\n    }\n  ]\n}\n</code></pre>"},{"location":"roteiro3/#get-order","title":"GET\u00a0<code>/order</code>","text":"<p>Retorna todos os pedidos.</p> <pre><code>[\n  {\n    \"id\": \"uuid-order\u20111\",\n    \"date\": \"2025-05-22\",\n    \"total\": 12.50,\n    \"account\": { \"id\": \"uuid-account\" },\n    \"items\": [/* \u2026 */]\n  },\n  { \"id\": \"uuid-order\u20112\", \"date\": \"2025-05-23\", ... }\n]\n</code></pre> <p><code>200\u00a0OK</code></p>"},{"location":"roteiro3/#get-orderididaccountidaccount","title":"GET\u00a0<code>/order/{id}?idAccount={idAccount}</code>","text":"<p>Busca um pedido por ID e verifica se pertence \u00e0 conta. Se a combina\u00e7\u00e3o n\u00e3o existir, retorna <code>404 Not\u00a0Found</code>.</p>"},{"location":"roteiro3/#bottlenecks-destaques","title":"Bottlenecks / Destaques","text":"\u2705 Implementa\u00e7\u00e3o \u2714\ufe0f Relacionamento 1\u202f\u2192\u202fN mapeado com <code>@OneToMany</code>\u00a0/\u00a0<code>@ManyToOne</code>. \u2714\ufe0f Persist\u00eancia em transa\u00e7\u00e3o \u00fanica: cabe\u00e7alho salvo, itens salvos em cascade. \u2714\ufe0f Valida\u00e7\u00e3o de produto via Feign no microservi\u00e7o Product. \u2714\ufe0f Migration Flyway garante cria\u00e7\u00e3o dos esquemas/tabelas e FK antes do start. \u2714\ufe0f Gera\u00e7\u00e3o autom\u00e1tica de UUID (<code>GenerationType.UUID</code> + <code>uuid_generate_v4()</code> no Postgres)."},{"location":"roteiro3/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ul> <li><code>Order.java</code>\u00a0\u2192 objeto de dom\u00ednio (DTO).</li> <li><code>OrderItem.java</code>\u00a0\u2192 objeto de dom\u00ednio.</li> <li><code>OrderModel.java</code>\u00a0\u2192 entidade JPA (<code>orders.orders</code>).</li> <li><code>OrderItemModel.java</code>\u00a0\u2192 entidade JPA (<code>orders.order_item</code>).</li> <li><code>OrderRepository.java</code>, <code>OrderItemRepository.java</code>\u00a0\u2192 reposit\u00f3rios Spring\u00a0Data.</li> <li><code>OrderService.java</code>\u00a0\u2192 regras de neg\u00f3cio, orquestra valida\u00e7\u00f5es e persist\u00eancia.</li> <li><code>OrderParser.java</code>\u00a0\u2192 convers\u00e3o Modelo\u00a0\u21c6\u00a0Dom\u00ednio\u00a0\u21c6\u00a0DTO.</li> <li><code>OrderResource.java</code>\u00a0\u2192 camada REST (interface <code>OrderController</code>).</li> </ul>"},{"location":"roteiro3/#base-de-dados","title":"Base de Dados","text":"<p>Script Flyway utilizado (<code>orders</code> \u00e9 o schema default):</p> <pre><code>CREATE SCHEMA IF NOT EXISTS orders;\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nCREATE TABLE IF NOT EXISTS orders.orders (\n    id_order      VARCHAR(36) PRIMARY KEY DEFAULT uuid_generate_v4(),\n    id_account    VARCHAR(36) NOT NULL,\n    dt_date       DATE NOT NULL,\n    db_total      DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS orders.order_item (\n    id_order_item VARCHAR(36) PRIMARY KEY DEFAULT uuid_generate_v4(),\n    id_order      VARCHAR(36) NOT NULL REFERENCES orders.orders(id_order) ON DELETE CASCADE,\n    id_product    VARCHAR(36) NOT NULL,\n    int_quantity  INTEGER NOT NULL,\n    nr_price_product DECIMAL(10,2) NOT NULL,\n    nr_total      DECIMAL(10,2) NOT NULL\n);\n\nCREATE INDEX IF NOT EXISTS idx_order_item__id_order ON orders.order_item(id_order);\n</code></pre>"},{"location":"roteiro3/#diagrama-arquitetura-da-solucao","title":"Diagrama \u2014 Arquitetura da Solu\u00e7\u00e3o","text":"<pre><code>graph TD\n    Internet --&gt; Gateway\n    Gateway --&gt; Auth\n    Gateway --&gt; Product\n    Gateway --&gt; Order\n    Order --&gt; Postgres[(PostgreSQL)]\n    Product --&gt; Postgres\n</code></pre>"},{"location":"roteiro3/#testes-realizados","title":"Testes Realizados","text":"<ul> <li>Testes manuais via Postman em todos os endpoints (<code>201/200/404/400</code>).  </li> <li>Teste de integra\u00e7\u00e3o salvando pedido com 3 itens e conferindo persist\u00eancia.  </li> <li>Teste de falha: produto inexistente \u2192 retorna <code>400 Bad\u00a0Request</code>.  </li> </ul>"},{"location":"roteiro3/#repositorio","title":"Reposit\u00f3rio","text":"<ul> <li>https://github.com/Platform-Microservices/order</li> <li>https://github.com/Platform-Microservices/order-service</li> </ul>"},{"location":"roteiro4/","title":"Roteiro 4 \u2014 CI/CD com Jenkins","text":""},{"location":"roteiro4/#desenvolvedora","title":"Desenvolvedora","text":"<ul> <li>Esther Cunha  </li> </ul>"},{"location":"roteiro4/#por-que-utilizar-o-jenkins","title":"Por que utilizar o Jenkins?","text":"<p>O Jenkins \u00e9 uma ferramenta de automa\u00e7\u00e3o open source amplamente utilizada em processos de Integra\u00e7\u00e3o Cont\u00ednua (CI) e Entrega Cont\u00ednua (CD). Com ele, \u00e9 poss\u00edvel automatizar tarefas como:</p> <ul> <li>Build de aplica\u00e7\u00f5es</li> <li>Execu\u00e7\u00e3o de testes</li> <li>Gera\u00e7\u00e3o e push de imagens Docker</li> <li>Deploy em ambientes de produ\u00e7\u00e3o ou homologa\u00e7\u00e3o</li> </ul> <p>Al\u00e9m disso, ele se integra facilmente com servi\u00e7os como DockerHub, GitHub, AWS, e Kubernetes, permitindo uma entrega r\u00e1pida, confi\u00e1vel e reproduz\u00edvel.</p>"},{"location":"roteiro4/#descricao-da-atividade","title":"Descri\u00e7\u00e3o da Atividade","text":"<p>Foi implementada uma pipeline completa de CI/CD para o microservi\u00e7os, utilizando o Jenkins como orquestrador de build e deploy.</p> <p>Essa pipeline automatiza todas as etapas cr\u00edticas da entrega, desde a compila\u00e7\u00e3o at\u00e9 o deploy da imagem Docker no reposit\u00f3rio remoto.</p>"},{"location":"roteiro4/#requisitos-atendidos","title":"Requisitos atendidos:","text":"<ul> <li>Pipeline versionada com <code>Jenkinsfile</code> dentro do reposit\u00f3rio dos microservi\u00e7os.</li> <li>Build da aplica\u00e7\u00e3o Java com Maven (<code>clean package</code>).</li> <li>Gera\u00e7\u00e3o de imagem Docker multiplataforma com <code>buildx</code>.</li> <li>Publica\u00e7\u00e3o autom\u00e1tica da imagem no DockerHub (<code>latest</code> e tag com <code>BUILD_ID</code>).</li> <li>Uso de credenciais seguras armazenadas no Jenkins (DockerHub credentials).</li> <li>Execu\u00e7\u00e3o local do Jenkins com controle total do processo.</li> </ul>"},{"location":"roteiro4/#exemplo-de-jenkinsfile-utilizado","title":"Exemplo de Jenkinsfile Utilizado","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product'\n        NAME = \"esthercaroline/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"roteiro4/#etapas-da-pipeline","title":"Etapas da Pipeline","text":"Etapa Descri\u00e7\u00e3o <code>Dependecies</code> Executa o job <code>product</code> para garantir que o build do microservi\u00e7o ocorra. <code>Build</code> Compila a aplica\u00e7\u00e3o usando Maven, sem rodar os testes. <code>Build &amp; Push</code> Gera imagem multiplataforma com <code>buildx</code> e publica no DockerHub."},{"location":"roteiro4/#jenkins-rodando","title":"Jenkins rodando","text":"<p>Exemplo: </p>"},{"location":"roteiro5/","title":"Roteiro 5 \u2014 Deploy com Kubernetes","text":""},{"location":"roteiro5/#desenvolvedora","title":"Desenvolvedora","text":"<ul> <li>Esther Cunha</li> </ul>"},{"location":"roteiro5/#por-que-usar-kubernetes","title":"\u2705 Por que usar Kubernetes?","text":"<p>O Kubernetes \u00e9 uma plataforma de orquestra\u00e7\u00e3o de containers que automatiza o deployment, escalonamento e gerenciamento de aplica\u00e7\u00f5es containerizadas. Ele permite que microservi\u00e7os sejam executados de forma padronizada, resiliente e escal\u00e1vel.</p> <p>Utilizar Kubernetes \u00e9 uma pr\u00e1tica essencial em ambientes modernos de produ\u00e7\u00e3o, pois:</p> <ul> <li>Garante alta disponibilidade das aplica\u00e7\u00f5es.</li> <li>Facilita o gerenciamento e monitoramento dos servi\u00e7os.</li> <li>Permite automa\u00e7\u00e3o de deploys e rollback.</li> <li>Suporta diferentes ambientes (local com Minikube, ou em nuvem: AWS EKS, GCP GKE, Azure AKS).</li> </ul>"},{"location":"roteiro5/#descricao-da-atividade","title":"Descri\u00e7\u00e3o da Atividade","text":"<p>Foi realizado o deploy dos microservi\u00e7os em um cluster Kubernetes local utilizando Minikube. Todos os microservi\u00e7os foram publicados no mesmo cluster, com seus respectivos arquivos de configura\u00e7\u00e3o.</p> <p>Cada microservi\u00e7o possui seu pr\u00f3prio diret\u00f3rio de configura\u00e7\u00e3o <code>k8s/</code> com o arquivo <code>k8s.yaml</code>, contendo os seguintes recursos:</p> <ul> <li><code>Secret</code></li> <li><code>ConfigMap</code></li> <li><code>Deployment</code></li> <li><code>Service</code></li> </ul>"},{"location":"roteiro5/#microservicos-configurados","title":"Microservi\u00e7os configurados:","text":"<ul> <li><code>account-service</code></li> <li><code>auth-service</code></li> <li><code>gateway-service</code></li> <li><code>product-service</code></li> <li><code>order-service</code></li> </ul>"},{"location":"roteiro5/#estrutura-de-diretorios","title":"\u2705 Estrutura de Diret\u00f3rios","text":"<pre><code>\ud83d\udcc1 api/\n\u251c\u2500\u2500 \ud83d\udcc1 account-service/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n\u251c\u2500\u2500 \ud83d\udcc1 auth-service/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n\u251c\u2500\u2500 \ud83d\udcc1 gateway-service/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n\u251c\u2500\u2500 \ud83d\udcc1 product-service/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n\u2514\u2500\u2500 \ud83d\udcc1 order-service/\n    \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n        \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n</code></pre>"},{"location":"roteiro5/#exemplo-de-arquivo-k8syaml","title":"\u2705 Exemplo de Arquivo <code>k8s.yaml</code>","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n        - name: product\n          image: 'esthercaroline/product:latest'\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DATABASE_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_HOST\n            - name: DATABASE_USER\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  type: ClusterIP\n  ports:\n    - port: 8080\n  selector:\n    app: product\n</code></pre>"},{"location":"roteiro5/#verificando-os-servicos-rodando","title":"Verificando os servi\u00e7os rodando","text":"<p>Ap\u00f3s aplicar os manifests com <code>kubectl apply -f k8s.yaml</code>, foi utilizado o comando:</p> <pre><code>kubectl get pods\nkubectl get services\n</code></pre> <p>Esses comandos confirmam que os servi\u00e7os est\u00e3o rodando no mesmo cluster.</p>"},{"location":"roteiro5/#kubernetes-rodando","title":"Kubernetes rodando","text":"<p>Exemplo: </p>"},{"location":"roteiro5/#conclusao","title":"Conclus\u00e3o","text":"<p>Com o Kubernetes configurado corretamente, todos os microservi\u00e7os funcionam de forma isolada, escal\u00e1vel e resiliente. A separa\u00e7\u00e3o por <code>Deployment</code>, <code>Service</code>, <code>Secrets</code> e <code>ConfigMap</code> garante clareza e manutenibilidade, al\u00e9m de facilitar o deploy tanto em ambiente local quanto em nuvem.</p>"}]}